using Jay.SourceGen.Text;

namespace Jay.SourceGen.Tests.Text;

public class CodeBuilderTests
{
    [Fact]
    public void CanClearCode()
    {
        using var code = new CodeBuilder();
        code.WriteIndentAwareText("ABC".AsSpan());
        Assert.Equal("ABC", code.ToString());
        code.Clear();
        Assert.Equal(string.Empty, code.ToString());
    }
    
    [Fact]
    public void CanAppendInterpolatedCode()
    {
        using var code = new CodeBuilder();
        
        code.Append($"ABCDEFG");
        Assert.Equal("ABCDEFG", code.ToString());
        code.Clear();
        
        code.Append($"""
            Eat
            At
            Joes
            """);
        Assert.Equal("""
            Eat
            At
            Joes
            """, code.ToString());
        code.Clear();

        var now = DateTime.Now;
        code.Append($"This time is {now}");
        Assert.Equal($"This time is {now}", code.ToString());
        code.Clear();
    }

    [Fact]
    public void CanAppendInterpolatedCodeCBA()
    {
        using var code = new CodeBuilder();
        CBA cba = static cb => cb.Append($"X");
        
        code.Append($"Hey {cba}!");
        Assert.Equal("Hey X!", code.ToString());
        code.Clear();

        code.Append($"{cba}{cba}{cba}: The Movie");
        Assert.Equal("XXX: The Movie", code.ToString());
        code.Clear();
    }

    // [Fact]
    // public void IsIndentAware()
    // {
    //     using var code = new CodeBuilder();
    //
    //     code.Append($"Start indent:\r\n    ");
    //     Assert.Equal("Start indent:\r\n    ", code.ToString());
    //
    //     code.Append($"0");
    //     Assert.Equal("Start indent:\r\n    0", code.ToString());
    //
    //     code.Append($"\r\n");
    //     Assert.Equal("Start indent:\r\n    0\r\n    ", code.ToString());
    // }

    [Fact]
    public void IsIndentAwareCBA()
    {
        using var code = new CodeBuilder();
        CBA cba = static cb => cb.Append($"""
            -START
            -CodeBuilderAction was called.
            -STOP
            """);
        
        code.Append($$"""
        public void Action()
        {
            {{cba}}
        }
        """);
        Assert.Equal("""
            public void Action()
            {
                -START
                -CodeBuilderAction was called.
                -STOP
            }
            """,
            code.ToString());
        code.Clear();
    }
    

    
//     [Fact]
//     public void AnythingWorks()
//     {
//         using var code = new CodeBuilder();
//         code.AutoGeneratedHeader()
//             .Using("System.Text")
//             .Namespace("Jay.Testing")
//             .WriteLine("public static class SuperThing")
//             .BracketBlock(
//                 classBlock =>
//                 {
//                     classBlock.Write("public SuperThing(")
//                         .Code(typeof(int))
//                         .Write(" id = ")
//                         .Code(147)
//                         .Write(", ")
//                         .Code(typeof(string))
//                         .Code(" name = ")
//                         .Code("Joe")
//                         .WriteLine(')')
//                         .BracketBlock(
//                             ctorBlock =>
//                             {
//                                 ctorBlock.WriteLine("throw new NotImplementedException();");
//                             })
//                         .NewLine();
//                 })
//             .NewLine();
//
//         string str = code.ToString();
//         Hold.Onto(str);
//         Debugger.Break();
//         Assert.True(true);
//     }
}