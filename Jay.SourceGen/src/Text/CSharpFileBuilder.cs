using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace Jay.SourceGen.Text;

public class CSharpFileBuilder : IDisposable
{
    private CBA? _headerComments;
    private CBA? _nullableAnnotation;
    private HashSet<string>? _usings;
    private CBA? _namespace;

    public CodeBuilder Code { get; }

    public CSharpFileBuilder()
    {
        this.Code = new();
    }

    /// <summary>
    /// Adds the <c>// &lt;auto-generated/&gt;</c> header line,
    /// optionally expanding it to include a <paramref name="comment"/>
    /// </summary>
    public CSharpFileBuilder AutoGeneratedHeader(string? comment = null)
    {
        _headerComments += code =>
        {
            if (comment is null)
            {
                code.Append("// <auto-generated/>").NewLine();
            }
            else
            {
                code.Append("// <auto-generated>").NewLine();
                foreach (var line in comment.TextSplit(CodeBuilder.DefaultNewLine))
                {
                    code.Append("// ").Append(line).NewLine();
                }
                code.Append("// </auto-generated>").NewLine();
            }
        };
        return this;
    }

    /// <summary>
    /// Adds the <c>#nullable enable|disable</c> annotation
    /// </summary>
    public CSharpFileBuilder Nullable(bool enable = true)
    {
        _nullableAnnotation += code =>
        {
            code.Append("#nullable ")
                .Append(enable ? "enable" : "disable")
                .NewLine();
        };
        return this;
    }

    /// <summary>
    /// Adds a <c>using</c> statement for the given <paramref name="namespace"/>
    /// </summary>
    public CSharpFileBuilder Using(string @namespace)
    {
        if (!string.IsNullOrWhiteSpace(@namespace))
        {
            _usings ??= new HashSet<string>();
            _usings.Add(@namespace);
        }
        return this;
    }

    /// <summary>
    /// Adds multiple <c>using</c> statements for the given <paramref name="namespaces"/>
    /// </summary>
    public CSharpFileBuilder Usings(params string[]? namespaces)
    {
        if (namespaces is not null)
        {
            foreach (var @namespace in namespaces)
            {
                Using(@namespace);
            }
        }
        return this;
    }

    public CSharpFileBuilder Namespace(string? @namespace)
    {
        if (!string.IsNullOrWhiteSpace(@namespace))
        {
            _namespace = code =>
            {
                code.Append("namespace ")
                    .Append(@namespace)
                    .Append(';')
                    .NewLine();
            };
        }
        return this;
    }

    public string GetSourceCode()
    {
        using var source = new CodeBuilder();
        if (_headerComments is not null)
        {
            _headerComments(source);
            source.NewLine();
        }
        if (_nullableAnnotation is not null)
        {
            _nullableAnnotation(source);
            source.NewLine();
        }
        if (_usings is not null)
        {
            foreach (var @namespace in _usings)
            {
                source.Append("using ").Append(@namespace).Append(';').NewLine();
            }
            source.NewLine();
        }
        if (_namespace is not null)
        {
            _namespace(source);
            source.NewLine();
        }
        source.Append(this.Code.Written);
        string code = source.ToString();
        return code;
    }
    
    public SourceText GetSourceText()
    {
        string code = GetSourceCode();
        return SourceText.From(code, Encoding.UTF8);
    }

    public void Dispose()
    {
        this.Code.Dispose();
    }
}